% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/method.R
\name{getArgumentDefaults}
\alias{getArgumentDefaults}
\alias{getArgumentDefaults,lcMethod-method}
\title{Default argument values for lcMethod subclass}
\usage{
\S4method{getArgumentDefaults}{lcMethod}(object)
}
\arguments{
\item{object}{The \code{lcMethod} object.}
}
\value{
A named \code{list} of argument values.
}
\description{
Returns the default arguments associated with the respective \code{lcMethod} subclass.
These arguments are automatically included into the \code{lcMethod} object during initialization.
}
\section{Implementation}{

Although implementing this method is optional, it prevents users from
having to specify all arguments every time they want to create a method specification.

In this example, most of the default arguments are defined as arguments of the function
\code{lcMethodExample}, which we can include in the list by calling \link{formals}. Copying the arguments from functions
is especially useful when your method implementation is based on an existing function.
\preformatted{
setMethod("getArgumentDefaults", "lcMethodExample", function(object) {
  list(
    formals(lcMethodExample),
    formals(funFEM::funFEM),
    extra = Value ~ 1,
    tol = 1e-4,
    callNextMethod()
  )
})

It is recommended to add `callNextMethod()` to the end of the list.
This enables inheriting the default arguments from superclasses.
}
}

\seealso{
\link{lcMethod} \link{getArgumentExclusions}
}
